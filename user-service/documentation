openapi: 3.0.3
info:
  title: API de Usuarios
  version: 1.0.0
  description: API para gestionar usuarios con CRUD, login y recuperación de clave.

servers:
  - url: http://localhost:8080/

paths:
  /user:
    post:
      summary: Registro de usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreate"
      responses:
        "201":
          description: Usuario creado correctamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Datos inválidos
        "409":
          description: El correo ya está registrado
        "500":
          description: Error interno del servidor
        "503":
          description: Servicio de base de datos no disponible

  /login:
    post:
      summary: Inicio de sesión
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        "200":
          description: Login exitoso (devuelve token JWT)
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        "400":
          description: Datos inválidos
        "401":
          description: Credenciales incorrectas
        "500":
          description: Error interno del servidor
        "503":
          description: Servicio de autenticación no disponible

  /user/recover:
    post:
      summary: Solicitar recuperación de contraseña
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
      responses:
        "200":
          description: Email enviado con instrucciones de recuperación
        "400":
          description: Email inválido
        "404":
          description: Usuario no encontrado
        "500":
          description: Error interno del servidor
        "503":
          description: Servicio de correo no disponible

  /user/password/{id}:
    patch:
      summary: Actualizar contraseña de usuario
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
                  minLength: 8
      responses:
        "200":
          description: Contraseña actualizada correctamente
        "400":
          description: Datos inválidos
        "401":
          description: No autorizado
        "404":
          description: Usuario no encontrado
        "500":
          description: Error interno del servidor
        "503":
          description: Servicio de base de datos no disponible

  /users/{id}:
    get:
      summary: Ver perfil de un usuario (autenticado)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Datos del usuario autenticado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: No autorizado
        "500":
          description: Error interno del servidor
        "503":
          description: Servicio de base de datos no disponible

  /users:
    put:
      summary: Actualizar datos de la cuenta propia
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        "200":
          description: Datos actualizados correctamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Datos inválidos
        "401":
          description: No autorizado
        "500":
          description: Error interno del servidor
        "503":
          description: Servicio de base de datos no disponible

    delete:
      summary: Eliminar cuenta propia
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Cuenta eliminada correctamente
        "401":
          description: No autorizado
        "403":
          description: No tiene permisos para esta acción
        "500":
          description: Error interno del servidor
        "503":
          description: Servicio de base de datos no disponible

    get:
      summary: Listar todos los usuarios (solo admins)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Lista de usuarios
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          description: No autorizado
        "403":
          description: Solo administradores pueden ver esta información
        "500":
          description: Error interno del servidor
        "503":
          description: Servicio de base de datos no disponible

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          example: "Juan Pérez"
        email:
          type: string
          format: email
          example: "juan@example.com"

    UserCreate:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8

    UserUpdate:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
